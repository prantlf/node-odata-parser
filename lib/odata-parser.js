module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "url": parse_url
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "url";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function text() {
        return input.substring(reportedPos, pos);
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_WSP() {
        var r0;
        
        if (input.charCodeAt(pos) === 32) {
          r0 = " ";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return r0;
      }
      
      function parse_DIGIT() {
        var r0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return r0;
      }
      
      function parse_INT() {
        var r0, r1, r2;
        
        r1 = pos;
        r2 = parse_DIGIT();
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r2 = parse_DIGIT();
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return a.join(''); })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_HEXDIG() {
        var r0;
        
        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        return r0;
      }
      
      function parse_HEXDIG2() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_HEXDIG();
        if (r2 !== null) {
          r3 = parse_HEXDIG();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_HEXDIG4() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_HEXDIG2();
        if (r2 !== null) {
          r3 = parse_HEXDIG2();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_HEXDIG8() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_HEXDIG4();
        if (r2 !== null) {
          r3 = parse_HEXDIG8();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_SQUOTE() {
        var r0;
        
        if (input.substr(pos, 4) === "%x27") {
          r0 = "%x27";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"%x27\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 39) {
            r0 = "'";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
        }
        return r0;
      }
      
      function parse_primitiveLiteral() {
        var r0;
        
        r0 = parse_null();
        if (r0 === null) {
          r0 = parse_binary();
          if (r0 === null) {
            r0 = parse_dateTime();
            if (r0 === null) {
              r0 = parse_dateTimeOffset();
              if (r0 === null) {
                r0 = parse_guid();
                if (r0 === null) {
                  r0 = parse_double();
                  if (r0 === null) {
                    r0 = parse_decimal();
                    if (r0 === null) {
                      r0 = parse_single();
                      if (r0 === null) {
                        r0 = parse_int32();
                        if (r0 === null) {
                          r0 = parse_int64();
                          if (r0 === null) {
                            r0 = parse_byte();
                            if (r0 === null) {
                              r0 = parse_sbyte();
                              if (r0 === null) {
                                r0 = parse_boolean();
                                if (r0 === null) {
                                  r0 = parse_string();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_null() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        if (input.substr(pos, 4) === "null") {
          r2 = "null";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          if (input.charCodeAt(pos) === 39) {
            r5 = "'";
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (r5 !== null) {
            r6 = parse_identifier();
            if (r6 !== null) {
              if (input.charCodeAt(pos) === 39) {
                r7 = "'";
                pos++;
              } else {
                r7 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (r7 !== null) {
                r3 = [r5, r6, r7];
              } else {
                r3 = null;
                pos = r4;
              }
            } else {
              r3 = null;
              pos = r4;
            }
          } else {
            r3 = null;
            pos = r4;
          }
          r3 = r3 !== null ? r3 : "";
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_binary() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        if (input.substr(pos, 4) === "%d88") {
          r2 = "%d88";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"%d88\"");
          }
        }
        if (r2 === null) {
          if (input.substr(pos, 6) === "binary") {
            r2 = "binary";
            pos += 6;
          } else {
            r2 = null;
            if (reportFailures === 0) {
              matchFailed("\"binary\"");
            }
          }
        }
        if (r2 !== null) {
          r3 = parse_SQUOTE();
          if (r3 !== null) {
            r4 = parse_HEXDIG();
            if (r4 !== null) {
              r5 = parse_HEXDIG();
              if (r5 !== null) {
                r6 = parse_SQUOTE();
                if (r6 !== null) {
                  r0 = [r2, r3, r4, r5, r6];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_boolean() {
        var r0, r1;
        
        r1 = pos;
        if (input.substr(pos, 4) === "true") {
          r0 = "true";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return true; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          if (input.charCodeAt(pos) === 49) {
            r0 = "1";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"1\"");
            }
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return true; })();
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            if (input.substr(pos, 5) === "false") {
              r0 = "false";
              pos += 5;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"false\"");
              }
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function() { return false; })();
            }
            if (r0 === null) {
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              if (input.charCodeAt(pos) === 48) {
                r0 = "0";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"0\"");
                }
              }
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function() { return false; })();
              }
              if (r0 === null) {
                pos = r1;
              }
            }
          }
        }
        return r0;
      }
      
      function parse_byte() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_DIGIT();
        if (r2 !== null) {
          r3 = parse_DIGIT();
          if (r3 !== null) {
            r4 = parse_DIGIT();
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTime() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8) === "datetime") {
          r3 = "datetime";
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"datetime\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_SQUOTE();
          if (r4 !== null) {
            r5 = parse_dateTimeBody();
            if (r5 !== null) {
              r6 = parse_SQUOTE();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return new Date(a); })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeOffset() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        if (input.substr(pos, 14) === "datetimeoffset") {
          r2 = "datetimeoffset";
          pos += 14;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"datetimeoffset\"");
          }
        }
        if (r2 !== null) {
          r3 = parse_SQUOTE();
          if (r3 !== null) {
            r4 = parse_dateTimeOffsetBody();
            if (r4 !== null) {
              r5 = parse_SQUOTE();
              if (r5 !== null) {
                r0 = [r2, r3, r4, r5];
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeBodyA() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_year();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 45) {
            r4 = "-";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_zeroToTwelve();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 45) {
                r6 = "-";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (r6 !== null) {
                r7 = parse_zeroToThirtyOne();
                if (r7 !== null) {
                  if (input.charCodeAt(pos) === 84) {
                    r8 = "T";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (r8 !== null) {
                    r9 = parse_zeroToTwentyFour();
                    if (r9 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        r10 = ":";
                        pos++;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (r10 !== null) {
                        r11 = parse_zeroToSixty();
                        if (r11 !== null) {
                          if (input.charCodeAt(pos) === 90) {
                            r12 = "Z";
                            pos++;
                          } else {
                            r12 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"Z\"");
                            }
                          }
                          r12 = r12 !== null ? r12 : "";
                          if (r12 !== null) {
                            r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b, c, d, e) {
                                            return a + '-' + b + '-' + c + "T" + d + ":" + e;
                                        })(r3, r5, r7, r9, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeBodyB() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_dateTimeBodyA();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 58) {
            r4 = ":";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_zeroToSixty();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 90) {
                r6 = "Z";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"Z\"");
                }
              }
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) { return a + ":" + b; })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeBodyC() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_dateTimeBodyB();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 46) {
            r4 = ".";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_INT();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) { return a + "." + b; })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeBodyD() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_dateTimeBodyC();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 45) {
            r4 = "-";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_zeroToTwentyFour();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 58) {
                r6 = ":";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (r6 !== null) {
                r7 = parse_zeroToSixty();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b, c) {
                                            return a + "-" + b + ":" + c;
                                        })(r3, r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_dateTimeBody() {
        var r0;
        
        r0 = parse_dateTimeBodyD();
        if (r0 === null) {
          r0 = parse_dateTimeBodyC();
          if (r0 === null) {
            r0 = parse_dateTimeBodyB();
            if (r0 === null) {
              r0 = parse_dateTimeBodyA();
            }
          }
        }
        return r0;
      }
      
      function parse_dateTimeOffsetBody() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = parse_dateTimeBody();
        if (r2 !== null) {
          if (input.charCodeAt(pos) === 90) {
            r3 = "Z";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"Z\"");
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = parse_dateTimeBody();
          if (r2 !== null) {
            r3 = parse_sign();
            if (r3 !== null) {
              r4 = parse_zeroToThirteen();
              if (r4 !== null) {
                if (input.substr(pos, 3) === ":00") {
                  r5 = ":00";
                  pos += 3;
                } else {
                  r5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":00\"");
                  }
                }
                if (r5 !== null) {
                  r0 = [r2, r3, r4, r5];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = parse_dateTimeBody();
            if (r2 !== null) {
              r3 = parse_sign();
              if (r3 !== null) {
                r4 = parse_zeroToThirteen();
                if (r4 !== null) {
                  r0 = [r2, r3, r4];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = parse_dateTimeBody();
              if (r2 !== null) {
                r3 = parse_sign();
                if (r3 !== null) {
                  r4 = parse_zeroToTwelve();
                  if (r4 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      r5 = ":";
                      pos++;
                    } else {
                      r5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (r5 !== null) {
                      r6 = parse_zeroToSixty();
                      if (r6 !== null) {
                        r0 = [r2, r3, r4, r5, r6];
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
              if (r0 === null) {
                r1 = pos;
                r2 = parse_dateTimeBody();
                if (r2 !== null) {
                  r3 = parse_sign();
                  if (r3 !== null) {
                    r4 = parse_zeroToTwelve();
                    if (r4 !== null) {
                      r0 = [r2, r3, r4];
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_decimal() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_sign();
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r5 = parse_DIGIT();
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              r5 = parse_DIGIT();
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 46) {
              r5 = ".";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r5 !== null) {
              r7 = parse_DIGIT();
              if (r7 !== null) {
                r6 = [];
                while (r7 !== null) {
                  r6.push(r7);
                  r7 = parse_DIGIT();
                }
              } else {
                r6 = null;
              }
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 77) {
                  r7 = "M";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"M\"");
                  }
                }
                if (r7 === null) {
                  if (input.charCodeAt(pos) === 109) {
                    r7 = "m";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"m\"");
                    }
                  }
                }
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(sign, digit, decimal) { return sign + digit.join('') + '.' + decimal.join(''); })(r3, r4, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_sign();
          r3 = r3 !== null ? r3 : "";
          if (r3 !== null) {
            r5 = parse_DIGIT();
            if (r5 !== null) {
              r4 = [];
              while (r5 !== null) {
                r4.push(r5);
                r5 = parse_DIGIT();
              }
            } else {
              r4 = null;
            }
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 77) {
                r5 = "M";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"M\"");
                }
              }
              if (r5 === null) {
                if (input.charCodeAt(pos) === 109) {
                  r5 = "m";
                  pos++;
                } else {
                  r5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"m\"");
                  }
                }
              }
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return sign + digit.join(''); })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_double() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_sign();
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r4 = parse_DIGIT();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 46) {
              r5 = ".";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r5 !== null) {
              r7 = parse_DIGIT();
              if (r7 !== null) {
                r6 = [];
                while (r7 !== null) {
                  r6.push(r7);
                  r7 = parse_DIGIT();
                }
              } else {
                r6 = null;
              }
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 101) {
                  r7 = "e";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"e\"");
                  }
                }
                if (r7 === null) {
                  if (input.charCodeAt(pos) === 69) {
                    r7 = "E";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"E\"");
                    }
                  }
                }
                if (r7 !== null) {
                  r8 = parse_sign();
                  r8 = r8 !== null ? r8 : "";
                  if (r8 !== null) {
                    r10 = parse_DIGIT();
                    if (r10 !== null) {
                      r9 = [];
                      while (r10 !== null) {
                        r9.push(r10);
                        r10 = parse_DIGIT();
                      }
                    } else {
                      r9 = null;
                    }
                    if (r9 !== null) {
                      if (input.charCodeAt(pos) === 68) {
                        r10 = "D";
                        pos++;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"D\"");
                        }
                      }
                      if (r10 === null) {
                        if (input.charCodeAt(pos) === 100) {
                          r10 = "d";
                          pos++;
                        } else {
                          r10 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"d\"");
                          }
                        }
                      }
                      r10 = r10 !== null ? r10 : "";
                      if (r10 !== null) {
                        r0 = [r3, r4, r5, r6, r7, r8, r9, r10];
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(sign, digit, decimal, signexp, exp) { return sign + digit + '.' + decimal.join('') + 'e' + signexp + exp.join(''); })(r3, r4, r6, r8, r9);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_sign();
          r3 = r3 !== null ? r3 : "";
          if (r3 !== null) {
            r5 = parse_DIGIT();
            if (r5 !== null) {
              r4 = [];
              while (r5 !== null) {
                r4.push(r5);
                r5 = parse_DIGIT();
              }
            } else {
              r4 = null;
            }
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 46) {
                r5 = ".";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (r5 !== null) {
                r7 = parse_DIGIT();
                if (r7 !== null) {
                  r6 = [];
                  while (r7 !== null) {
                    r6.push(r7);
                    r7 = parse_DIGIT();
                  }
                } else {
                  r6 = null;
                }
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 68) {
                    r7 = "D";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"D\"");
                    }
                  }
                  if (r7 === null) {
                    if (input.charCodeAt(pos) === 100) {
                      r7 = "d";
                      pos++;
                    } else {
                      r7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"d\"");
                      }
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(sign, digit, decimal) { return sign + digit.join('') + '.' + decimal.join(''); })(r3, r4, r6);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse_sign();
            r3 = r3 !== null ? r3 : "";
            if (r3 !== null) {
              r5 = parse_DIGIT();
              if (r5 !== null) {
                r4 = [];
                while (r5 !== null) {
                  r4.push(r5);
                  r5 = parse_DIGIT();
                }
              } else {
                r4 = null;
              }
              if (r4 !== null) {
                if (input.charCodeAt(pos) === 68) {
                  r5 = "D";
                  pos++;
                } else {
                  r5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"D\"");
                  }
                }
                if (r5 === null) {
                  if (input.charCodeAt(pos) === 100) {
                    r5 = "d";
                    pos++;
                  } else {
                    r5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"d\"");
                    }
                  }
                }
                if (r5 !== null) {
                  r0 = [r3, r4, r5];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(sign, digit) { return sign + digit.join(''); })(r3, r4);
            }
            if (r0 === null) {
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = parse_nanInfinity();
              if (r2 !== null) {
                if (input.charCodeAt(pos) === 68) {
                  r3 = "D";
                  pos++;
                } else {
                  r3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"D\"");
                  }
                }
                if (r3 === null) {
                  if (input.charCodeAt(pos) === 100) {
                    r3 = "d";
                    pos++;
                  } else {
                    r3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"d\"");
                    }
                  }
                }
                r3 = r3 !== null ? r3 : "";
                if (r3 !== null) {
                  r0 = [r2, r3];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            }
          }
        }
        return r0;
      }
      
      function parse_guid() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        if (input.substr(pos, 4) === "guid") {
          r2 = "guid";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"guid\"");
          }
        }
        if (r2 !== null) {
          r3 = parse_SQUOTE();
          if (r3 !== null) {
            r4 = parse_HEXDIG8();
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 45) {
                r5 = "-";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (r5 !== null) {
                r6 = parse_HEXDIG4();
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 45) {
                    r7 = "-";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (r7 !== null) {
                    r8 = parse_HEXDIG4();
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 45) {
                        r9 = "-";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"-\"");
                        }
                      }
                      if (r9 !== null) {
                        r10 = parse_HEXDIG8();
                        if (r10 !== null) {
                          r11 = parse_HEXDIG4();
                          if (r11 !== null) {
                            r12 = parse_SQUOTE();
                            if (r12 !== null) {
                              r0 = [r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12];
                            } else {
                              r0 = null;
                              pos = r1;
                            }
                          } else {
                            r0 = null;
                            pos = r1;
                          }
                        } else {
                          r0 = null;
                          pos = r1;
                        }
                      } else {
                        r0 = null;
                        pos = r1;
                      }
                    } else {
                      r0 = null;
                      pos = r1;
                    }
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_int32() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_sign();
        r3 = r3 !== null ? r3 : "";
        if (r3 !== null) {
          r5 = parse_DIGIT();
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              r5 = parse_DIGIT();
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(sign, digit) { return parseInt(digit.join('')) * (sign === '-' ? -1 : 1); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_int64() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_sign();
        r2 = r2 !== null ? r2 : "";
        if (r2 !== null) {
          r4 = parse_DIGIT();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_DIGIT();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 76) {
              r4 = "L";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"L\"");
              }
            }
            if (r4 === null) {
              if (input.charCodeAt(pos) === 108) {
                r4 = "l";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"l\"");
                }
              }
            }
            r4 = r4 !== null ? r4 : "";
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_sbyte() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = parse_sign();
        r2 = r2 !== null ? r2 : "";
        if (r2 !== null) {
          r3 = parse_DIGIT();
          if (r3 !== null) {
            r4 = parse_DIGIT();
            r4 = r4 !== null ? r4 : "";
            if (r4 !== null) {
              r5 = parse_DIGIT();
              r5 = r5 !== null ? r5 : "";
              if (r5 !== null) {
                r0 = [r2, r3, r4, r5];
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_single() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r3 = pos;
        r4 = parse_sign();
        if (r4 !== null) {
          r5 = parse_DIGIT();
          if (r5 !== null) {
            if (input.charCodeAt(pos) === 46) {
              r6 = ".";
              pos++;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r6 !== null) {
              r8 = parse_DIGIT();
              if (r8 !== null) {
                r7 = [];
                while (r8 !== null) {
                  r7.push(r8);
                  r8 = parse_DIGIT();
                }
              } else {
                r7 = null;
              }
              if (r7 !== null) {
                if (input.charCodeAt(pos) === 101) {
                  r8 = "e";
                  pos++;
                } else {
                  r8 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"e\"");
                  }
                }
                if (r8 === null) {
                  if (input.charCodeAt(pos) === 69) {
                    r8 = "E";
                    pos++;
                  } else {
                    r8 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"E\"");
                    }
                  }
                }
                if (r8 !== null) {
                  r9 = parse_sign();
                  if (r9 !== null) {
                    r11 = parse_DIGIT();
                    if (r11 !== null) {
                      r10 = [];
                      while (r11 !== null) {
                        r10.push(r11);
                        r11 = parse_DIGIT();
                      }
                    } else {
                      r10 = null;
                    }
                    if (r10 !== null) {
                      r2 = [r4, r5, r6, r7, r8, r9, r10];
                    } else {
                      r2 = null;
                      pos = r3;
                    }
                  } else {
                    r2 = null;
                    pos = r3;
                  }
                } else {
                  r2 = null;
                  pos = r3;
                }
              } else {
                r2 = null;
                pos = r3;
              }
            } else {
              r2 = null;
              pos = r3;
            }
          } else {
            r2 = null;
            pos = r3;
          }
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 === null) {
          r3 = pos;
          r4 = parse_sign();
          if (r4 !== null) {
            r5 = [];
            r6 = parse_DIGIT();
            while (r6 !== null) {
              r5.push(r6);
              r6 = parse_DIGIT();
            }
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 46) {
                r6 = ".";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (r6 !== null) {
                r8 = parse_DIGIT();
                if (r8 !== null) {
                  r7 = [];
                  while (r8 !== null) {
                    r7.push(r8);
                    r8 = parse_DIGIT();
                  }
                } else {
                  r7 = null;
                }
                if (r7 !== null) {
                  r2 = [r4, r5, r6, r7];
                } else {
                  r2 = null;
                  pos = r3;
                }
              } else {
                r2 = null;
                pos = r3;
              }
            } else {
              r2 = null;
              pos = r3;
            }
          } else {
            r2 = null;
            pos = r3;
          }
          if (r2 === null) {
            r3 = pos;
            r4 = parse_sign();
            if (r4 !== null) {
              r6 = parse_DIGIT();
              if (r6 !== null) {
                r5 = [];
                while (r6 !== null) {
                  r5.push(r6);
                  r6 = parse_DIGIT();
                }
              } else {
                r5 = null;
              }
              if (r5 !== null) {
                r2 = [r4, r5];
              } else {
                r2 = null;
                pos = r3;
              }
            } else {
              r2 = null;
              pos = r3;
            }
          }
        }
        if (r2 !== null) {
          if (input.charCodeAt(pos) === 70) {
            r3 = "F";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"F\"");
            }
          }
          if (r3 === null) {
            if (input.charCodeAt(pos) === 102) {
              r3 = "f";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"f\"");
              }
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = parse_nanInfinity();
          if (r2 !== null) {
            if (input.charCodeAt(pos) === 70) {
              r3 = "F";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"F\"");
              }
            }
            if (r3 === null) {
              if (input.charCodeAt(pos) === 102) {
                r3 = "f";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"f\"");
                }
              }
            }
            r3 = r3 !== null ? r3 : "";
            if (r3 !== null) {
              r0 = [r2, r3];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_string() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_SQUOTE();
        if (r3 !== null) {
          r4 = parse_validstring();
          if (r4 !== null) {
            r5 = parse_SQUOTE();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(l, v, r) { return v; })(r3, r4, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_oneToNine() {
        var r0;
        
        if (/^[1-9]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        return r0;
      }
      
      function parse_zeroToTwelve() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 48) {
          r3 = "0";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (r3 !== null) {
          if (/^[1-9]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[1-9]");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) { return a + b;})(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 49) {
            r3 = "1";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"1\"");
            }
          }
          if (r3 !== null) {
            if (/^[0-2]/.test(input.charAt(pos))) {
              r4 = input.charAt(pos);
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("[0-2]");
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(a, b) { return a + b; })(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_zeroToThirteen() {
        var r0;
        
        r0 = parse_zeroToTwelve();
        if (r0 === null) {
          if (input.substr(pos, 2) === "13") {
            r0 = "13";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"13\"");
            }
          }
        }
        return r0;
      }
      
      function parse_zeroToSixty() {
        var r0, r1, r2, r3, r4;
        
        if (input.substr(pos, 2) === "60") {
          r0 = "60";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"60\"");
          }
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (/^[0-5]/.test(input.charAt(pos))) {
            r3 = input.charAt(pos);
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("[0-5]");
            }
          }
          if (r3 !== null) {
            r4 = parse_DIGIT();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(a, b) { return a + b; })(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_zeroToThirtyOne() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 51) {
          r3 = "3";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"3\"");
          }
        }
        if (r3 !== null) {
          if (/^[0-1]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[0-1]");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return "3" + a; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (/^[0-2]/.test(input.charAt(pos))) {
            r3 = input.charAt(pos);
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("[0-2]");
            }
          }
          if (r3 !== null) {
            r4 = parse_DIGIT();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(a, b) { return a + b; })(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_zeroToTwentyFour() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 50) {
          r3 = "2";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"2\"");
          }
        }
        if (r3 !== null) {
          if (/^[0-4]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[0-4]");
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return "2" + a; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (/^[0-1]/.test(input.charAt(pos))) {
            r3 = input.charAt(pos);
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("[0-1]");
            }
          }
          if (r3 !== null) {
            r4 = parse_DIGIT();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(a, b) { return a + b; })(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_year() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_DIGIT();
        if (r3 !== null) {
          r4 = parse_DIGIT();
          if (r4 !== null) {
            r5 = parse_DIGIT();
            if (r5 !== null) {
              r6 = parse_DIGIT();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b, c, d) { return a + b + c + d; })(r3, r4, r5, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_sign() {
        var r0;
        
        if (input.charCodeAt(pos) === 43) {
          r0 = "+";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 45) {
            r0 = "-";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
        }
        return r0;
      }
      
      function parse_nan() {
        var r0;
        
        if (input.substr(pos, 3) === "NaN") {
          r0 = "NaN";
          pos += 3;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"NaN\"");
          }
        }
        return r0;
      }
      
      function parse_negativeInfinity() {
        var r0;
        
        if (input.substr(pos, 4) === "-INF") {
          r0 = "-INF";
          pos += 4;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-INF\"");
          }
        }
        return r0;
      }
      
      function parse_positiveInfinity() {
        var r0;
        
        if (input.substr(pos, 3) === "INF") {
          r0 = "INF";
          pos += 3;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"INF\"");
          }
        }
        return r0;
      }
      
      function parse_nanInfinity() {
        var r0;
        
        r0 = parse_nan();
        if (r0 === null) {
          r0 = parse_negativeInfinity();
          if (r0 === null) {
            r0 = parse_positiveInfinity();
          }
        }
        return r0;
      }
      
      function parse_unreserved() {
        var r0, r1, r2;
        
        r1 = pos;
        if (/^[a-zA-Z0-9\-_]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9\\-_]");
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            if (/^[a-zA-Z0-9\-_]/.test(input.charAt(pos))) {
              r2 = input.charAt(pos);
              pos++;
            } else {
              r2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9\\-_]");
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return a.join(''); })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_validstring() {
        var r0, r1, r2;
        
        r1 = pos;
        r0 = [];
        if (/^[^']/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[^']");
          }
        }
        while (r2 !== null) {
          r0.push(r2);
          if (/^[^']/.test(input.charAt(pos))) {
            r2 = input.charAt(pos);
            pos++;
          } else {
            r2 = null;
            if (reportFailures === 0) {
              matchFailed("[^']");
            }
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return a.join(''); })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_identifierPart() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {
          r3 = input.charAt(pos);
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (r3 !== null) {
          r4 = parse_unreserved();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) { return a + b; })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_identifier() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_identifierPart();
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 46) {
            r7 = ".";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r7 !== null) {
            r8 = parse_identifier();
            if (r8 !== null) {
              r4 = [r7, r8];
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(i) {return i;})(r8);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, list) {
                                            if (list === "") list = [];
                                            if (require('util').isArray(list[0])) {
                                                list = list[0];
                                            }
                                            list.unshift(a);
                                            return list.join('.');
                                        })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_top() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 5) === "$top=") {
          r3 = "$top=";
          pos += 5;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$top=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_INT();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) { return { '$top': ~~a }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 5) === "$top=") {
            r3 = "$top=";
            pos += 5;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$top=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $top parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_expand() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8) === "$expand=") {
          r3 = "$expand=";
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$expand=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_expandList();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) { return { "$expand": list }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 8) === "$expand=") {
            r3 = "$expand=";
            pos += 8;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$expand=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $expand parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_expandList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_identifierPath();
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 44) {
            r7 = ",";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (r7 !== null) {
            r8 = parse_WSP();
            r8 = r8 !== null ? r8 : "";
            if (r8 !== null) {
              r9 = parse_expandList();
              if (r9 !== null) {
                r4 = [r7, r8, r9];
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(l) {return l;})(r9);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i, list) {
                                            if (list === "") list = [];
                                            if (require('util').isArray(list[0])) {
                                                list = list[0];
                                            }
                                            list.unshift(i);
                                            return list;
                                        })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_skip() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 6) === "$skip=") {
          r3 = "$skip=";
          pos += 6;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$skip=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_INT();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a) {return {'$skip': ~~a }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 6) === "$skip=") {
            r3 = "$skip=";
            pos += 6;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$skip=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $skip parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_format() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8) === "$format=") {
          r3 = "$format=";
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$format=\"");
          }
        }
        if (r3 !== null) {
          if (input.length > pos) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(v) { return {'$format': v.join('') }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 8) === "$format=") {
            r3 = "$format=";
            pos += 8;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$format=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $format parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_inlinecount() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 13) === "$inlinecount=") {
          r3 = "$inlinecount=";
          pos += 13;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$inlinecount=\"");
          }
        }
        if (r3 !== null) {
          if (input.substr(pos, 8) === "allpages") {
            r4 = "allpages";
            pos += 8;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"allpages\"");
            }
          }
          if (r4 === null) {
            if (input.substr(pos, 4) === "none") {
              r4 = "none";
              pos += 4;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"none\"");
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(v) { return {'$inlinecount': v }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 13) === "$inlinecount=") {
            r3 = "$inlinecount=";
            pos += 13;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$inlinecount=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $inlinecount parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_count() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 7) === "$count=") {
          r3 = "$count=";
          pos += 7;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$count=\"");
          }
        }
        if (r3 !== null) {
          if (input.substr(pos, 4) === "true") {
            r4 = "true";
            pos += 4;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"true\"");
            }
          }
          if (r4 === null) {
            if (input.substr(pos, 5) === "false") {
              r4 = "false";
              pos += 5;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"false\"");
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(v) { return {'$count': v }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 7) === "$count=") {
            r3 = "$count=";
            pos += 7;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$count=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $count parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_orderby() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 9) === "$orderby=") {
          r3 = "$orderby=";
          pos += 9;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$orderby=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_orderbyList();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) { 
                                            return { "$orderby": list }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 9) === "$orderby=") {
            r3 = "$orderby=";
            pos += 9;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$orderby=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $orderby parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_orderbyList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        r6 = parse_identifier();
        if (r6 !== null) {
          r8 = pos;
          r9 = parse_WSP();
          if (r9 !== null) {
            if (input.substr(pos, 3) === "asc") {
              r10 = "asc";
              pos += 3;
            } else {
              r10 = null;
              if (reportFailures === 0) {
                matchFailed("\"asc\"");
              }
            }
            if (r10 === null) {
              if (input.substr(pos, 4) === "desc") {
                r10 = "desc";
                pos += 4;
              } else {
                r10 = null;
                if (reportFailures === 0) {
                  matchFailed("\"desc\"");
                }
              }
            }
            if (r10 !== null) {
              r7 = [r9, r10];
            } else {
              r7 = null;
              pos = r8;
            }
          } else {
            r7 = null;
            pos = r8;
          }
          r7 = r7 !== null ? r7 : "";
          if (r7 !== null) {
            r3 = [r6, r7];
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(id, ord) { 
                                            var result = {};
                                            result[id] = ord[1] || 'asc';
                                            return result;
                                        })(r6, r7);
        }
        if (r3 === null) {
          pos = r4;
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 44) {
            r7 = ",";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (r7 !== null) {
            r8 = parse_WSP();
            r8 = r8 !== null ? r8 : "";
            if (r8 !== null) {
              r9 = parse_orderbyList();
              if (r9 !== null) {
                r4 = [r7, r8, r9];
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(l) {return l;})(r9);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i, list) {
        
                                            if (list === "") list = [];
                                            if (require('util').isArray(list[0])) {
                                                list = list[0];
                                            }
                                            list.unshift(i);
                                            return list;
                                        })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_select() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8) === "$select=") {
          r3 = "$select=";
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$select=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_selectList();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) { return { "$select":list }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 8) === "$select=") {
            r3 = "$select=";
            pos += 8;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$select=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $select parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_identifierPathParts() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 47) {
          r3 = "/";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifierPart();
          if (r4 !== null) {
            r5 = parse_identifierPathParts();
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i, list) {
                                            if (list === "") list = [];
                                            if (require('util').isArray(list[0])) {
                                                list = list[0];
                                            }
                                            list.unshift("/" + i);
                                            return list;
                                        })(r4, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_identifierPath() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_identifier();
        if (r3 !== null) {
          r4 = parse_identifierPathParts();
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, b) { return a + b; })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_selectList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        r6 = parse_identifierPath();
        if (r6 !== null) {
          if (input.substr(pos, 2) === ".*") {
            r7 = ".*";
            pos += 2;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\".*\"");
            }
          }
          r7 = r7 !== null ? r7 : "";
          if (r7 !== null) {
            r3 = [r6, r7];
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(a, b) {return a + b;})(r6, r7);
        }
        if (r3 === null) {
          pos = r4;
        }
        if (r3 === null) {
          if (input.charCodeAt(pos) === 42) {
            r3 = "*";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          if (input.charCodeAt(pos) === 44) {
            r7 = ",";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (r7 !== null) {
            r8 = parse_WSP();
            r8 = r8 !== null ? r8 : "";
            if (r8 !== null) {
              r9 = parse_selectList();
              if (r9 !== null) {
                r4 = [r7, r8, r9];
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            reportedPos = r5;
            r4 = (function(l) {return l;})(r9);
          }
          if (r4 === null) {
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(i, list) {
                                            if (list === "") list = [];
                                            if (require('util').isArray(list[0])) {
                                                list = list[0];
                                            }
                                            list.unshift(i);
                                            return list;
                                        })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_filter() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 8) === "$filter=") {
          r3 = "$filter=";
          pos += 8;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$filter=\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_filterExpr();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) { 
                                            return { 
                                                "$filter": list
                                            }; 
                                        })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 8) === "$filter=") {
            r3 = "$filter=";
            pos += 8;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"$filter=\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            while (r5 !== null) {
              r4.push(r5);
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return {"error": 'invalid $filter parameter'}; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_filterExpr() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 40) {
          r2 = "(";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (r2 !== null) {
          r3 = parse_WSP();
          r3 = r3 !== null ? r3 : "";
          if (r3 !== null) {
            r4 = parse_filterExpr();
            if (r4 !== null) {
              r5 = parse_WSP();
              r5 = r5 !== null ? r5 : "";
              if (r5 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  r6 = ")";
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (r6 !== null) {
                  r8 = pos;
                  r9 = parse_WSP();
                  if (r9 !== null) {
                    if (input.substr(pos, 3) === "and") {
                      r10 = "and";
                      pos += 3;
                    } else {
                      r10 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"and\"");
                      }
                    }
                    if (r10 === null) {
                      if (input.substr(pos, 2) === "or") {
                        r10 = "or";
                        pos += 2;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"or\"");
                        }
                      }
                    }
                    if (r10 !== null) {
                      r11 = parse_WSP();
                      if (r11 !== null) {
                        r12 = parse_filterExpr();
                        if (r12 !== null) {
                          r7 = [r9, r10, r11, r12];
                        } else {
                          r7 = null;
                          pos = r8;
                        }
                      } else {
                        r7 = null;
                        pos = r8;
                      }
                    } else {
                      r7 = null;
                      pos = r8;
                    }
                  } else {
                    r7 = null;
                    pos = r8;
                  }
                  r7 = r7 !== null ? r7 : "";
                  if (r7 !== null) {
                    r0 = [r2, r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r1;
                  }
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_cond();
          if (r3 !== null) {
            r5 = pos;
            r6 = pos;
            r7 = parse_WSP();
            if (r7 !== null) {
              if (input.substr(pos, 3) === "and") {
                r8 = "and";
                pos += 3;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"and\"");
                }
              }
              if (r8 === null) {
                if (input.substr(pos, 2) === "or") {
                  r8 = "or";
                  pos += 2;
                } else {
                  r8 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"or\"");
                  }
                }
              }
              if (r8 !== null) {
                r9 = parse_WSP();
                if (r9 !== null) {
                  r10 = parse_filterExpr();
                  if (r10 !== null) {
                    r4 = [r7, r8, r9, r10];
                  } else {
                    r4 = null;
                    pos = r6;
                  }
                } else {
                  r4 = null;
                  pos = r6;
                }
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
            if (r4 !== null) {
              reportedPos = r5;
              r4 = (function(type, value) {
                                                return { type: type, value: value}
                                          })(r8, r10);
            }
            if (r4 === null) {
              pos = r5;
            }
            r4 = r4 !== null ? r4 : "";
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(left, right) {
          
                                          if (right) {
                                              return {
                                                  type: right.type,
                                                  left: left,
                                                  right: right.value
                                              }
                                          } else {
                                              return left;
                                          }
                                        })(r3, r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_booleanFunctions2Args() {
        var r0;
        
        if (input.substr(pos, 11) === "substringof") {
          r0 = "substringof";
          pos += 11;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"substringof\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 8) === "endswith") {
            r0 = "endswith";
            pos += 8;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"endswith\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 10) === "startswith") {
              r0 = "startswith";
              pos += 10;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"startswith\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 4) === "IsOf") {
                r0 = "IsOf";
                pos += 4;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"IsOf\"");
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_booleanFunc() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_booleanFunctions2Args();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_part();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r6 = ",";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r6 !== null) {
                r7 = parse_WSP();
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  r8 = parse_part();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(f, arg0, arg1) {
                                            return {
                                                type: "functioncall",
                                                func: f,
                                                args: [arg0, arg1]
                                            }
                                        })(r3, r5, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 5) === "IsOf(") {
            r3 = "IsOf(";
            pos += 5;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"IsOf(\"");
            }
          }
          if (r3 !== null) {
            r4 = parse_part();
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 41) {
                r5 = ")";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(arg0) {
                                              return {
                                                  type: "functioncall",
                                                  func: "IsOf",
                                                  args: [arg0]
                                              }
                                          })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_otherFunctions1Arg() {
        var r0;
        
        if (input.substr(pos, 7) === "tolower") {
          r0 = "tolower";
          pos += 7;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"tolower\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 7) === "toupper") {
            r0 = "toupper";
            pos += 7;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"toupper\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 4) === "trim") {
              r0 = "trim";
              pos += 4;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"trim\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 6) === "length") {
                r0 = "length";
                pos += 6;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"length\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 4) === "year") {
                  r0 = "year";
                  pos += 4;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"year\"");
                  }
                }
                if (r0 === null) {
                  if (input.substr(pos, 5) === "month") {
                    r0 = "month";
                    pos += 5;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"month\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.substr(pos, 3) === "day") {
                      r0 = "day";
                      pos += 3;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"day\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.substr(pos, 4) === "hour") {
                        r0 = "hour";
                        pos += 4;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"hour\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.substr(pos, 6) === "minute") {
                          r0 = "minute";
                          pos += 6;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"minute\"");
                          }
                        }
                        if (r0 === null) {
                          if (input.substr(pos, 6) === "second") {
                            r0 = "second";
                            pos += 6;
                          } else {
                            r0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"second\"");
                            }
                          }
                          if (r0 === null) {
                            if (input.substr(pos, 5) === "round") {
                              r0 = "round";
                              pos += 5;
                            } else {
                              r0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"round\"");
                              }
                            }
                            if (r0 === null) {
                              if (input.substr(pos, 5) === "floor") {
                                r0 = "floor";
                                pos += 5;
                              } else {
                                r0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"floor\"");
                                }
                              }
                              if (r0 === null) {
                                if (input.substr(pos, 7) === "ceiling") {
                                  r0 = "ceiling";
                                  pos += 7;
                                } else {
                                  r0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"ceiling\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_otherFunc1() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_otherFunctions1Arg();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_part();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 41) {
                r6 = ")";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(f, arg0) {
                                          return {
                                              type: "functioncall",
                                              func: f,
                                              args: [arg0]
                                          }
                                      })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_otherFunctions2Arg() {
        var r0;
        
        if (input.substr(pos, 7) === "indexof") {
          r0 = "indexof";
          pos += 7;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"indexof\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 6) === "concat") {
            r0 = "concat";
            pos += 6;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"concat\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 9) === "substring") {
              r0 = "substring";
              pos += 9;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"substring\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 7) === "replace") {
                r0 = "replace";
                pos += 7;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"replace\"");
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_otherFunc2() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_otherFunctions2Arg();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_part();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r6 = ",";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r6 !== null) {
                r7 = parse_WSP();
                r7 = r7 !== null ? r7 : "";
                if (r7 !== null) {
                  r8 = parse_part();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(f, arg0, arg1) {
                                          return {
                                              type: "functioncall",
                                              func: f,
                                              args: [arg0, arg1]
                                          }
                                      })(r3, r5, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 10) === "substring(") {
            r3 = "substring(";
            pos += 10;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"substring(\"");
            }
          }
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 40) {
              r4 = "(";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (r4 !== null) {
              r5 = parse_part();
              if (r5 !== null) {
                if (input.charCodeAt(pos) === 44) {
                  r6 = ",";
                  pos++;
                } else {
                  r6 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (r6 !== null) {
                  r7 = parse_WSP();
                  r7 = r7 !== null ? r7 : "";
                  if (r7 !== null) {
                    r8 = parse_part();
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 44) {
                        r9 = ",";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }
                      if (r9 !== null) {
                        r10 = parse_WSP();
                        r10 = r10 !== null ? r10 : "";
                        if (r10 !== null) {
                          r11 = parse_part();
                          if (r11 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                              r12 = ")";
                              pos++;
                            } else {
                              r12 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (r12 !== null) {
                              r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12];
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(arg0, arg1, arg2) {
                                            return {
                                                type: "functioncall",
                                                func: "substring",
                                                args: [arg0, arg1, ag2]
                                            }
                                        })(r5, r8, r11);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.substr(pos, 8) === "replace(") {
              r3 = "replace(";
              pos += 8;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"replace(\"");
              }
            }
            if (r3 !== null) {
              if (input.charCodeAt(pos) === 40) {
                r4 = "(";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (r4 !== null) {
                r5 = parse_part();
                if (r5 !== null) {
                  if (input.charCodeAt(pos) === 44) {
                    r6 = ",";
                    pos++;
                  } else {
                    r6 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (r6 !== null) {
                    r7 = parse_WSP();
                    r7 = r7 !== null ? r7 : "";
                    if (r7 !== null) {
                      r8 = parse_part();
                      if (r8 !== null) {
                        if (input.charCodeAt(pos) === 44) {
                          r9 = ",";
                          pos++;
                        } else {
                          r9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (r9 !== null) {
                          r10 = parse_WSP();
                          r10 = r10 !== null ? r10 : "";
                          if (r10 !== null) {
                            r11 = parse_part();
                            if (r11 !== null) {
                              if (input.charCodeAt(pos) === 41) {
                                r12 = ")";
                                pos++;
                              } else {
                                r12 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (r12 !== null) {
                                r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12];
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(arg0, arg1, arg2) {
                                              return {
                                                  type: "functioncall",
                                                  func: "replace",
                                                  args: [arg0, arg1, ag2]
                                              }
                                          })(r5, r8, r11);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_cond() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_part();
        if (r3 !== null) {
          r4 = parse_WSP();
          if (r4 !== null) {
            r5 = parse_op();
            if (r5 !== null) {
              r6 = parse_WSP();
              if (r6 !== null) {
                r7 = parse_part();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(a, op, b) {
                                            return {
                                                type: op,
                                                left: a,
                                                right: b
                                            };
                                        })(r3, r5, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_booleanFunc();
        }
        return r0;
      }
      
      function parse_part() {
        var r0, r1;
        
        r0 = parse_booleanFunc();
        if (r0 === null) {
          r0 = parse_otherFunc2();
          if (r0 === null) {
            r0 = parse_otherFunc1();
            if (r0 === null) {
              r1 = pos;
              r0 = parse_primitiveLiteral();
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function(l) {
                                                  return {
                                                      type: 'literal',
                                                      value: l
                                                  };
                                              })(r0);
              }
              if (r0 === null) {
                pos = r1;
              }
              if (r0 === null) {
                r1 = pos;
                r0 = parse_identifier();
                if (r0 !== null) {
                  reportedPos = r1;
                  r0 = (function(u) { 
                                                    return { 
                                                        type: 'property', name: u
                                                    }; 
                                                })(r0);
                }
                if (r0 === null) {
                  pos = r1;
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_op() {
        var r0;
        
        if (input.substr(pos, 2) === "eq") {
          r0 = "eq";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"eq\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === "ne") {
            r0 = "ne";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"ne\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 2) === "lt") {
              r0 = "lt";
              pos += 2;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"lt\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 2) === "le") {
                r0 = "le";
                pos += 2;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"le\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 2) === "gt") {
                  r0 = "gt";
                  pos += 2;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"gt\"");
                  }
                }
                if (r0 === null) {
                  if (input.substr(pos, 2) === "ge") {
                    r0 = "ge";
                    pos += 2;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"ge\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.substr(pos, 3) === "add") {
                      r0 = "add";
                      pos += 3;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"add\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.substr(pos, 3) === "sub") {
                        r0 = "sub";
                        pos += 3;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"sub\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.substr(pos, 3) === "mul") {
                          r0 = "mul";
                          pos += 3;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"mul\"");
                          }
                        }
                        if (r0 === null) {
                          if (input.substr(pos, 3) === "div") {
                            r0 = "div";
                            pos += 3;
                          } else {
                            r0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"div\"");
                            }
                          }
                          if (r0 === null) {
                            if (input.substr(pos, 3) === "mod") {
                              r0 = "mod";
                              pos += 3;
                            } else {
                              r0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"mod\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_unsupported() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 36) {
          r3 = "$";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        if (r3 !== null) {
          r4 = [];
          if (input.length > pos) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          while (r5 !== null) {
            r4.push(r5);
            if (input.length > pos) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(er) { return { error: "unsupported method: " + er }; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_expList() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_exp();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 38) {
            r4 = "&";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"&\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_expList();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e, el) { return [e].concat(el); })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_exp();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(e) { return [e]; })(r0);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_exp() {
        var r0;
        
        r0 = parse_expand();
        if (r0 === null) {
          r0 = parse_filter();
          if (r0 === null) {
            r0 = parse_orderby();
            if (r0 === null) {
              r0 = parse_skip();
              if (r0 === null) {
                r0 = parse_top();
                if (r0 === null) {
                  r0 = parse_format();
                  if (r0 === null) {
                    r0 = parse_inlinecount();
                    if (r0 === null) {
                      r0 = parse_count();
                      if (r0 === null) {
                        r0 = parse_select();
                        if (r0 === null) {
                          r0 = parse_unsupported();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_query() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_expList();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(list) {
                                            //turn the array into an object like:
                                            // { $top: 5, $skip: 10 }
                                            var result = {};
                                            list = list || [];
                                            for(var i in list){
        
                                                if (list[i] !== "") {
                                                    var paramName = Object.keys(list[i])[0]; //ie: $top
                                                    result[paramName] = list[i][paramName];
                                                }
                                            }
                                            return result;
                                        })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_predicate() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_identifier();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_primitiveLiteral();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(n, v) {
                                          return {
                                              type: 'property',
                                              name: n,
                                              value: v
                                          };
                                      })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_predicateList() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_predicate();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 44) {
            r4 = ",";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_WSP();
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              r6 = parse_predicateList();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e, l) {
                                          return [e].concat(l);
                                      })(r3, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_predicate();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(e) {
                                            return [e];
                                        })(r0);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r0 = parse_primitiveLiteral();
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(v) {
                                              return [{
                                                  type: 'literal',
                                                  value: v
                                              }];
                                          })(r0);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_resource() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_identifier();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 40) {
            r4 = "(";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_predicateList();
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 41) {
                r6 = ")";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(n, p) {
                                          return {
                                              name: n,
                                              predicates: p
                                          };
                                      })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_identifier();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(n) {
                                            return {
                                                name: n
                                            };
                                        })(r0);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            if (input.substr(pos, 6) === "$value") {
              r0 = "$value";
              pos += 6;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"$value\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 6) === "$count") {
                r0 = "$count";
                pos += 6;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"$count\"");
                }
              }
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(v) {
                                              return {
                                                  name: v
                                              };
                                          })(r0);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_path() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_resource();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 47) {
            r4 = "/";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_path();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e, l) {
                                          return [e].concat(l);
                                      })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_resource();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(e) {
                                            return [e];
                                        })(r0);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_url() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_path();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 63) {
            r4 = "?";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"?\"");
            }
          }
          if (r4 !== null) {
            r5 = parse_query();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(p, q) {
                                          q.$path = p;
                                          return q;
                                      })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_path();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(p) {
                                            return {$path: p};
                                        })(r0);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r0 = parse_query();
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(q) {
                                              return q;
                                          })(r0);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
